// Code generated by mockery v2.46.2. DO NOT EDIT.

package store

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCoursesStore is an autogenerated mock type for the CoursesStore type
type MockCoursesStore struct {
	mock.Mock
}

type MockCoursesStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCoursesStore) EXPECT() *MockCoursesStore_Expecter {
	return &MockCoursesStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, course
func (_m *MockCoursesStore) Create(ctx context.Context, course *Course) error {
	ret := _m.Called(ctx, course)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Course) error); ok {
		r0 = rf(ctx, course)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCoursesStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCoursesStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - course *Course
func (_e *MockCoursesStore_Expecter) Create(ctx interface{}, course interface{}) *MockCoursesStore_Create_Call {
	return &MockCoursesStore_Create_Call{Call: _e.mock.On("Create", ctx, course)}
}

func (_c *MockCoursesStore_Create_Call) Run(run func(ctx context.Context, course *Course)) *MockCoursesStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Course))
	})
	return _c
}

func (_c *MockCoursesStore_Create_Call) Return(_a0 error) *MockCoursesStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCoursesStore_Create_Call) RunAndReturn(run func(context.Context, *Course) error) *MockCoursesStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *MockCoursesStore) Get(ctx context.Context) ([]Course, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []Course
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Course, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Course); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Course)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoursesStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCoursesStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCoursesStore_Expecter) Get(ctx interface{}) *MockCoursesStore_Get_Call {
	return &MockCoursesStore_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockCoursesStore_Get_Call) Run(run func(ctx context.Context)) *MockCoursesStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCoursesStore_Get_Call) Return(_a0 []Course, _a1 error) *MockCoursesStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCoursesStore_Get_Call) RunAndReturn(run func(context.Context) ([]Course, error)) *MockCoursesStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUUID provides a mock function with given fields: ctx, uuid
func (_m *MockCoursesStore) GetByUUID(ctx context.Context, uuid string) (Course, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetByUUID")
	}

	var r0 Course
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Course, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Course); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(Course)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCoursesStore_GetByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUUID'
type MockCoursesStore_GetByUUID_Call struct {
	*mock.Call
}

// GetByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockCoursesStore_Expecter) GetByUUID(ctx interface{}, uuid interface{}) *MockCoursesStore_GetByUUID_Call {
	return &MockCoursesStore_GetByUUID_Call{Call: _e.mock.On("GetByUUID", ctx, uuid)}
}

func (_c *MockCoursesStore_GetByUUID_Call) Run(run func(ctx context.Context, uuid string)) *MockCoursesStore_GetByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCoursesStore_GetByUUID_Call) Return(_a0 Course, _a1 error) *MockCoursesStore_GetByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCoursesStore_GetByUUID_Call) RunAndReturn(run func(context.Context, string) (Course, error)) *MockCoursesStore_GetByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCoursesStore creates a new instance of MockCoursesStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCoursesStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCoursesStore {
	mock := &MockCoursesStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
