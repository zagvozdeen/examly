// Code generated by mockery v2.46.2. DO NOT EDIT.

package store

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFilesStore is an autogenerated mock type for the FilesStore type
type MockFilesStore struct {
	mock.Mock
}

type MockFilesStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFilesStore) EXPECT() *MockFilesStore_Expecter {
	return &MockFilesStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, file
func (_m *MockFilesStore) Create(ctx context.Context, file *File) error {
	ret := _m.Called(ctx, file)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *File) error); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFilesStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFilesStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - file *File
func (_e *MockFilesStore_Expecter) Create(ctx interface{}, file interface{}) *MockFilesStore_Create_Call {
	return &MockFilesStore_Create_Call{Call: _e.mock.On("Create", ctx, file)}
}

func (_c *MockFilesStore_Create_Call) Run(run func(ctx context.Context, file *File)) *MockFilesStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*File))
	})
	return _c
}

func (_c *MockFilesStore_Create_Call) Return(_a0 error) *MockFilesStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFilesStore_Create_Call) RunAndReturn(run func(context.Context, *File) error) *MockFilesStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFilesStore creates a new instance of MockFilesStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilesStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilesStore {
	mock := &MockFilesStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
