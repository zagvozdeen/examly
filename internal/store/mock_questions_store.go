// Code generated by mockery v2.46.2. DO NOT EDIT.

package store

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockQuestionsStore is an autogenerated mock type for the QuestionsStore type
type MockQuestionsStore struct {
	mock.Mock
}

type MockQuestionsStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuestionsStore) EXPECT() *MockQuestionsStore_Expecter {
	return &MockQuestionsStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, question
func (_m *MockQuestionsStore) Create(ctx context.Context, question *Question) error {
	ret := _m.Called(ctx, question)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Question) error); ok {
		r0 = rf(ctx, question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuestionsStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockQuestionsStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - question *Question
func (_e *MockQuestionsStore_Expecter) Create(ctx interface{}, question interface{}) *MockQuestionsStore_Create_Call {
	return &MockQuestionsStore_Create_Call{Call: _e.mock.On("Create", ctx, question)}
}

func (_c *MockQuestionsStore_Create_Call) Run(run func(ctx context.Context, question *Question)) *MockQuestionsStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Question))
	})
	return _c
}

func (_c *MockQuestionsStore_Create_Call) Return(_a0 error) *MockQuestionsStore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuestionsStore_Create_Call) RunAndReturn(run func(context.Context, *Question) error) *MockQuestionsStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, question
func (_m *MockQuestionsStore) Delete(ctx context.Context, question *Question) error {
	ret := _m.Called(ctx, question)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Question) error); ok {
		r0 = rf(ctx, question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuestionsStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockQuestionsStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - question *Question
func (_e *MockQuestionsStore_Expecter) Delete(ctx interface{}, question interface{}) *MockQuestionsStore_Delete_Call {
	return &MockQuestionsStore_Delete_Call{Call: _e.mock.On("Delete", ctx, question)}
}

func (_c *MockQuestionsStore_Delete_Call) Run(run func(ctx context.Context, question *Question)) *MockQuestionsStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Question))
	})
	return _c
}

func (_c *MockQuestionsStore_Delete_Call) Return(_a0 error) *MockQuestionsStore_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuestionsStore_Delete_Call) RunAndReturn(run func(context.Context, *Question) error) *MockQuestionsStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx
func (_m *MockQuestionsStore) Get(ctx context.Context) ([]Question, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Question, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Question); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Question)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuestionsStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockQuestionsStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockQuestionsStore_Expecter) Get(ctx interface{}) *MockQuestionsStore_Get_Call {
	return &MockQuestionsStore_Get_Call{Call: _e.mock.On("Get", ctx)}
}

func (_c *MockQuestionsStore_Get_Call) Run(run func(ctx context.Context)) *MockQuestionsStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockQuestionsStore_Get_Call) Return(_a0 []Question, _a1 error) *MockQuestionsStore_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuestionsStore_Get_Call) RunAndReturn(run func(context.Context) ([]Question, error)) *MockQuestionsStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCourseID provides a mock function with given fields: ctx, id
func (_m *MockQuestionsStore) GetByCourseID(ctx context.Context, id int) ([]Question, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByCourseID")
	}

	var r0 []Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]Question, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []Question); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Question)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuestionsStore_GetByCourseID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCourseID'
type MockQuestionsStore_GetByCourseID_Call struct {
	*mock.Call
}

// GetByCourseID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockQuestionsStore_Expecter) GetByCourseID(ctx interface{}, id interface{}) *MockQuestionsStore_GetByCourseID_Call {
	return &MockQuestionsStore_GetByCourseID_Call{Call: _e.mock.On("GetByCourseID", ctx, id)}
}

func (_c *MockQuestionsStore_GetByCourseID_Call) Run(run func(ctx context.Context, id int)) *MockQuestionsStore_GetByCourseID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockQuestionsStore_GetByCourseID_Call) Return(_a0 []Question, _a1 error) *MockQuestionsStore_GetByCourseID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuestionsStore_GetByCourseID_Call) RunAndReturn(run func(context.Context, int) ([]Question, error)) *MockQuestionsStore_GetByCourseID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockQuestionsStore) GetByID(ctx context.Context, id int) (Question, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (Question, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) Question); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(Question)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuestionsStore_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockQuestionsStore_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockQuestionsStore_Expecter) GetByID(ctx interface{}, id interface{}) *MockQuestionsStore_GetByID_Call {
	return &MockQuestionsStore_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockQuestionsStore_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockQuestionsStore_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockQuestionsStore_GetByID_Call) Return(_a0 Question, _a1 error) *MockQuestionsStore_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuestionsStore_GetByID_Call) RunAndReturn(run func(context.Context, int) (Question, error)) *MockQuestionsStore_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDs provides a mock function with given fields: ctx, ids
func (_m *MockQuestionsStore) GetByIDs(ctx context.Context, ids []int) ([]Question, error) {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDs")
	}

	var r0 []Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int) ([]Question, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int) []Question); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Question)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuestionsStore_GetByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDs'
type MockQuestionsStore_GetByIDs_Call struct {
	*mock.Call
}

// GetByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []int
func (_e *MockQuestionsStore_Expecter) GetByIDs(ctx interface{}, ids interface{}) *MockQuestionsStore_GetByIDs_Call {
	return &MockQuestionsStore_GetByIDs_Call{Call: _e.mock.On("GetByIDs", ctx, ids)}
}

func (_c *MockQuestionsStore_GetByIDs_Call) Run(run func(ctx context.Context, ids []int)) *MockQuestionsStore_GetByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int))
	})
	return _c
}

func (_c *MockQuestionsStore_GetByIDs_Call) Return(_a0 []Question, _a1 error) *MockQuestionsStore_GetByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuestionsStore_GetByIDs_Call) RunAndReturn(run func(context.Context, []int) ([]Question, error)) *MockQuestionsStore_GetByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUUID provides a mock function with given fields: ctx, uuid
func (_m *MockQuestionsStore) GetByUUID(ctx context.Context, uuid string) (Question, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetByUUID")
	}

	var r0 Question
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Question, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Question); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(Question)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuestionsStore_GetByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUUID'
type MockQuestionsStore_GetByUUID_Call struct {
	*mock.Call
}

// GetByUUID is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockQuestionsStore_Expecter) GetByUUID(ctx interface{}, uuid interface{}) *MockQuestionsStore_GetByUUID_Call {
	return &MockQuestionsStore_GetByUUID_Call{Call: _e.mock.On("GetByUUID", ctx, uuid)}
}

func (_c *MockQuestionsStore_GetByUUID_Call) Run(run func(ctx context.Context, uuid string)) *MockQuestionsStore_GetByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockQuestionsStore_GetByUUID_Call) Return(_a0 Question, _a1 error) *MockQuestionsStore_GetByUUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuestionsStore_GetByUUID_Call) RunAndReturn(run func(context.Context, string) (Question, error)) *MockQuestionsStore_GetByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, question
func (_m *MockQuestionsStore) Update(ctx context.Context, question *Question) error {
	ret := _m.Called(ctx, question)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Question) error); ok {
		r0 = rf(ctx, question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuestionsStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockQuestionsStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - question *Question
func (_e *MockQuestionsStore_Expecter) Update(ctx interface{}, question interface{}) *MockQuestionsStore_Update_Call {
	return &MockQuestionsStore_Update_Call{Call: _e.mock.On("Update", ctx, question)}
}

func (_c *MockQuestionsStore_Update_Call) Run(run func(ctx context.Context, question *Question)) *MockQuestionsStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Question))
	})
	return _c
}

func (_c *MockQuestionsStore_Update_Call) Return(_a0 error) *MockQuestionsStore_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuestionsStore_Update_Call) RunAndReturn(run func(context.Context, *Question) error) *MockQuestionsStore_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: ctx, question
func (_m *MockQuestionsStore) UpdateStatus(ctx context.Context, question *Question) error {
	ret := _m.Called(ctx, question)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Question) error); ok {
		r0 = rf(ctx, question)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockQuestionsStore_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockQuestionsStore_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - question *Question
func (_e *MockQuestionsStore_Expecter) UpdateStatus(ctx interface{}, question interface{}) *MockQuestionsStore_UpdateStatus_Call {
	return &MockQuestionsStore_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", ctx, question)}
}

func (_c *MockQuestionsStore_UpdateStatus_Call) Run(run func(ctx context.Context, question *Question)) *MockQuestionsStore_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*Question))
	})
	return _c
}

func (_c *MockQuestionsStore_UpdateStatus_Call) Return(_a0 error) *MockQuestionsStore_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuestionsStore_UpdateStatus_Call) RunAndReturn(run func(context.Context, *Question) error) *MockQuestionsStore_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuestionsStore creates a new instance of MockQuestionsStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuestionsStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuestionsStore {
	mock := &MockQuestionsStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
